// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OkOk.Data;

#nullable disable

namespace OkOk.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220120201538_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("ChatApplicationUserSupportGroup", b =>
                {
                    b.Property<string>("ChatUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChatUserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ChatApplicationUserSupportGroup");
                });

            modelBuilder.Entity("GuardianChild", b =>
                {
                    b.Property<string>("ChildId")
                        .HasColumnType("TEXT");

                    b.Property<string>("GuardianId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChildId", "GuardianId");

                    b.HasIndex("GuardianId");

                    b.ToTable("GuardianChild");

                    b.HasData(
                        new
                        {
                            ChildId = "de8459c4-4062-4068-9856-256096919996",
                            GuardianId = "9a1588e9-e19a-4a13-a9b8-e51c3039e338"
                        },
                        new
                        {
                            ChildId = "6a15ca21-cccb-42ed-8f19-edd6934910c8",
                            GuardianId = "8235b4b5-7f18-466d-aca1-913fdc869705"
                        });
                });

            modelBuilder.Entity("MessageChatapplicationUser", b =>
                {
                    b.Property<string>("ChatUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChatUserId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageChatapplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e75f9f05-a964-4b48-8d2e-ec57c5986234",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "fb404819-a49a-48ed-af48-6a70a6e78043",
                            ConcurrencyStamp = "1",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "fbf65982-e9a7-4c05-b2e0-57f4d77d4cef",
                            ConcurrencyStamp = "1",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "16e828f3-dee1-47eb-8450-dd69d7374cf9",
                            ConcurrencyStamp = "1",
                            Name = "Guardian",
                            NormalizedName = "GUARDIAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "cb942955-b31b-4e4d-b2f9-9d1928aeda7b",
                            RoleId = "e75f9f05-a964-4b48-8d2e-ec57c5986234"
                        },
                        new
                        {
                            UserId = "40e2b11d-7be4-41a6-ad95-508a04908823",
                            RoleId = "e75f9f05-a964-4b48-8d2e-ec57c5986234"
                        },
                        new
                        {
                            UserId = "70ad9b1f-1653-4c8b-b0cc-05151dd9c3e5",
                            RoleId = "e75f9f05-a964-4b48-8d2e-ec57c5986234"
                        },
                        new
                        {
                            UserId = "03065621-afd5-485b-a179-309f05a2f95c",
                            RoleId = "fb404819-a49a-48ed-af48-6a70a6e78043"
                        },
                        new
                        {
                            UserId = "280b2964-749e-4c67-9fa3-52d053d23cb9",
                            RoleId = "fb404819-a49a-48ed-af48-6a70a6e78043"
                        },
                        new
                        {
                            UserId = "de8459c4-4062-4068-9856-256096919996",
                            RoleId = "fbf65982-e9a7-4c05-b2e0-57f4d77d4cef"
                        },
                        new
                        {
                            UserId = "6a15ca21-cccb-42ed-8f19-edd6934910c8",
                            RoleId = "fbf65982-e9a7-4c05-b2e0-57f4d77d4cef"
                        },
                        new
                        {
                            UserId = "9a1588e9-e19a-4a13-a9b8-e51c3039e338",
                            RoleId = "16e828f3-dee1-47eb-8450-dd69d7374cf9"
                        },
                        new
                        {
                            UserId = "8235b4b5-7f18-466d-aca1-913fdc869705",
                            RoleId = "16e828f3-dee1-47eb-8450-dd69d7374cf9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OkOk.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HouseNumberAddition")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d59ed4f4-4a52-423b-9be2-789dabb0cd01"),
                            City = "Dorp",
                            Country = "Nederland",
                            HouseNumber = 1,
                            Street = "Dorpsstraat",
                            ZipCode = "1234AB"
                        },
                        new
                        {
                            Id = new Guid("f8a551b0-0ab2-4d0a-b5dd-183b8a1fe571"),
                            City = "Dorp",
                            Country = "Nederland",
                            HouseNumber = 1,
                            Street = "Dorpsstraat",
                            ZipCode = "1234AB"
                        });
                });

            modelBuilder.Entity("OkOk.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LockedOutReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "cb942955-b31b-4e4d-b2f9-9d1928aeda7b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14260196-cbb9-4551-b7bd-c25ec8048c2e",
                            Email = "angelo@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Angelo",
                            LastName = "OkOk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANGELO@OKOKAPP.NL",
                            NormalizedUserName = "ANGELO@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAENTXlnpvglCiOT+Cnl/T7TFVgpSsI8OrydVV9YeboGk4MFSmuhtOEwyj+AG2boSL3A==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "cdb8e1d9-2a55-410b-97d6-73560e903faa",
                            TwoFactorEnabled = false,
                            UserName = "angelo@okokapp.nl"
                        },
                        new
                        {
                            Id = "40e2b11d-7be4-41a6-ad95-508a04908823",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e09cfae-f005-4d0a-a328-0c6b5912c9c8",
                            Email = "dechaun@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Dechaun",
                            LastName = "OkOk",
                            LockoutEnabled = false,
                            NormalizedEmail = "DECHAUN@OKOKAPP.NL",
                            NormalizedUserName = "DECHAUN@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEKoldaDKnu463J4bdDAgGIVkviulj/tXhNtygjTXwwqzwG7KaPzAgfs94WosYZXBZg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1dc1dc69-df57-4373-9113-6f8c37dcb496",
                            TwoFactorEnabled = false,
                            UserName = "dechaun@okokapp.nl"
                        },
                        new
                        {
                            Id = "70ad9b1f-1653-4c8b-b0cc-05151dd9c3e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24fa01fb-4ad5-40af-8221-c36d3be256b5",
                            Email = "timothy@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Timothy",
                            LastName = "OkOk",
                            LockoutEnabled = false,
                            NormalizedEmail = "TIMOTHY@OKOKAPP.NL",
                            NormalizedUserName = "TIMOTHY@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEF87HRCu2fpGIN5rEyUJM+zwzPgtm4F8/WOfLK8wqJDmb0LafXUFA9ocviz1qAo4HQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6f7489ee-71f0-4677-80e5-ac4360df8750",
                            TwoFactorEnabled = false,
                            UserName = "timothy@okokapp.nl"
                        });
                });

            modelBuilder.Entity("OkOk.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f34da526-98c8-40e2-849d-405e40f1a758"),
                            Content = "Dit is een geseede message [1]",
                            DateTime = new DateTime(2022, 1, 20, 21, 15, 37, 932, DateTimeKind.Local).AddTicks(3775),
                            SenderId = "de8459c4-4062-4068-9856-256096919996"
                        },
                        new
                        {
                            Id = new Guid("3cf2624f-90a0-4166-815f-0ee1215c5677"),
                            Content = "Dit is een geseede message [2]",
                            DateTime = new DateTime(2022, 1, 20, 21, 15, 37, 932, DateTimeKind.Local).AddTicks(3793),
                            SenderId = "de8459c4-4062-4068-9856-256096919996"
                        },
                        new
                        {
                            Id = new Guid("de8627de-1e2e-4ff0-bc1f-285711469eb5"),
                            Content = "Dit is een geseede message [3]",
                            DateTime = new DateTime(2022, 1, 20, 21, 15, 37, 932, DateTimeKind.Local).AddTicks(3804),
                            SenderId = "6a15ca21-cccb-42ed-8f19-edd6934910c8"
                        },
                        new
                        {
                            Id = new Guid("008fed72-f9a3-4100-9c57-a88a152f400d"),
                            Content = "Dit is een geseede message [4]",
                            DateTime = new DateTime(2022, 1, 20, 21, 15, 37, 932, DateTimeKind.Local).AddTicks(3810),
                            SenderId = "6a15ca21-cccb-42ed-8f19-edd6934910c8"
                        });
                });

            modelBuilder.Entity("OkOk.Models.MessageReport", b =>
                {
                    b.Property<Guid?>("MessageId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("TEXT");

                    b.HasKey("MessageId", "ReportId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("MessageReports");

                    b.HasData(
                        new
                        {
                            MessageId = new Guid("f34da526-98c8-40e2-849d-405e40f1a758"),
                            ReportId = new Guid("45ac16ac-d464-4c4d-9c38-b6ce022d017b")
                        },
                        new
                        {
                            MessageId = new Guid("f34da526-98c8-40e2-849d-405e40f1a758"),
                            ReportId = new Guid("724fe7b0-495d-4dbe-a9a8-c3e5b6a23f44")
                        },
                        new
                        {
                            MessageId = new Guid("f34da526-98c8-40e2-849d-405e40f1a758"),
                            ReportId = new Guid("5d673c75-8984-4c31-80f8-5726797b42bb")
                        },
                        new
                        {
                            MessageId = new Guid("de8627de-1e2e-4ff0-bc1f-285711469eb5"),
                            ReportId = new Guid("c9621624-3619-4670-8e3d-254934dd496a")
                        });
                });

            modelBuilder.Entity("OkOk.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Handled")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45ac16ac-d464-4c4d-9c38-b6ce022d017b"),
                            Handled = false
                        },
                        new
                        {
                            Id = new Guid("724fe7b0-495d-4dbe-a9a8-c3e5b6a23f44"),
                            Handled = false
                        },
                        new
                        {
                            Id = new Guid("5d673c75-8984-4c31-80f8-5726797b42bb"),
                            Handled = false
                        },
                        new
                        {
                            Id = new Guid("c9621624-3619-4670-8e3d-254934dd496a"),
                            Handled = false
                        });
                });

            modelBuilder.Entity("OkOk.Models.SignUpRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Handled")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("DoctorId");

                    b.ToTable("SignUpRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f7d5ac7-9c1b-41aa-b3c8-96674e124912"),
                            ClientId = "de8459c4-4062-4068-9856-256096919996",
                            DoctorId = "03065621-afd5-485b-a179-309f05a2f95c",
                            Handled = false
                        },
                        new
                        {
                            Id = new Guid("c1d625a0-fb07-4e2f-ab0e-e781f658406b"),
                            ClientId = "6a15ca21-cccb-42ed-8f19-edd6934910c8",
                            DoctorId = "03065621-afd5-485b-a179-309f05a2f95c",
                            Handled = false
                        });
                });

            modelBuilder.Entity("OkOk.Models.SupportGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SupportGroups");
                });

            modelBuilder.Entity("OkOk.Models.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Treatments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c814d5f5-aa91-4d9e-8b81-f991cfff956c"),
                            ClientId = "de8459c4-4062-4068-9856-256096919996",
                            DateTime = new DateTime(2022, 1, 20, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "03065621-afd5-485b-a179-309f05a2f95c"
                        },
                        new
                        {
                            Id = new Guid("e050f7f6-37a4-42bb-9553-355286dc1dd3"),
                            ClientId = "de8459c4-4062-4068-9856-256096919996",
                            DateTime = new DateTime(2022, 1, 20, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "03065621-afd5-485b-a179-309f05a2f95c"
                        },
                        new
                        {
                            Id = new Guid("5f5b360d-a126-4d38-8052-e89886452a49"),
                            ClientId = "de8459c4-4062-4068-9856-256096919996",
                            DateTime = new DateTime(2022, 1, 20, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "03065621-afd5-485b-a179-309f05a2f95c"
                        },
                        new
                        {
                            Id = new Guid("ed5c0ca2-a65f-4771-9177-baff8b83684a"),
                            ClientId = "de8459c4-4062-4068-9856-256096919996",
                            DateTime = new DateTime(2022, 1, 11, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "03065621-afd5-485b-a179-309f05a2f95c"
                        },
                        new
                        {
                            Id = new Guid("d650536c-8d90-43c7-a5e2-cc7c031a4a48"),
                            ClientId = "de8459c4-4062-4068-9856-256096919996",
                            DateTime = new DateTime(2022, 1, 11, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "03065621-afd5-485b-a179-309f05a2f95c"
                        },
                        new
                        {
                            Id = new Guid("5dca797c-6daf-40ff-8edc-cb196c255cc2"),
                            ClientId = "de8459c4-4062-4068-9856-256096919996",
                            DateTime = new DateTime(2022, 1, 11, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "03065621-afd5-485b-a179-309f05a2f95c"
                        },
                        new
                        {
                            Id = new Guid("65115d57-0a20-4c64-911b-e3ee05d9682e"),
                            ClientId = "de8459c4-4062-4068-9856-256096919996",
                            DateTime = new DateTime(2022, 2, 28, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "03065621-afd5-485b-a179-309f05a2f95c"
                        },
                        new
                        {
                            Id = new Guid("6058a610-95bf-4158-bb19-68b03783e725"),
                            ClientId = "de8459c4-4062-4068-9856-256096919996",
                            DateTime = new DateTime(2022, 2, 28, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "03065621-afd5-485b-a179-309f05a2f95c"
                        },
                        new
                        {
                            Id = new Guid("97ccf801-d2b8-4837-90a9-2c98884c12bd"),
                            ClientId = "de8459c4-4062-4068-9856-256096919996",
                            DateTime = new DateTime(2022, 2, 28, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "03065621-afd5-485b-a179-309f05a2f95c"
                        },
                        new
                        {
                            Id = new Guid("7b1c423a-03cf-4ee7-8116-9747904de6f7"),
                            ClientId = "6a15ca21-cccb-42ed-8f19-edd6934910c8",
                            DateTime = new DateTime(2022, 1, 20, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "280b2964-749e-4c67-9fa3-52d053d23cb9"
                        },
                        new
                        {
                            Id = new Guid("cbfc6a25-247a-485b-83ef-73ec425a8e99"),
                            ClientId = "6a15ca21-cccb-42ed-8f19-edd6934910c8",
                            DateTime = new DateTime(2022, 1, 20, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "280b2964-749e-4c67-9fa3-52d053d23cb9"
                        },
                        new
                        {
                            Id = new Guid("ec8b93ab-4339-49f6-8319-8a27866281af"),
                            ClientId = "6a15ca21-cccb-42ed-8f19-edd6934910c8",
                            DateTime = new DateTime(2022, 1, 20, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "280b2964-749e-4c67-9fa3-52d053d23cb9"
                        },
                        new
                        {
                            Id = new Guid("8ee08a12-da9a-459c-98a3-86faea194e80"),
                            ClientId = "6a15ca21-cccb-42ed-8f19-edd6934910c8",
                            DateTime = new DateTime(2022, 1, 11, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "280b2964-749e-4c67-9fa3-52d053d23cb9"
                        },
                        new
                        {
                            Id = new Guid("fc54150e-8241-464e-86c6-5d38696ecf04"),
                            ClientId = "6a15ca21-cccb-42ed-8f19-edd6934910c8",
                            DateTime = new DateTime(2022, 1, 11, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "280b2964-749e-4c67-9fa3-52d053d23cb9"
                        },
                        new
                        {
                            Id = new Guid("aa118147-97fa-45bf-a53a-2cbf7104165e"),
                            ClientId = "6a15ca21-cccb-42ed-8f19-edd6934910c8",
                            DateTime = new DateTime(2022, 1, 11, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "280b2964-749e-4c67-9fa3-52d053d23cb9"
                        },
                        new
                        {
                            Id = new Guid("a3b60a54-fc11-4343-b6e0-e735d2484b76"),
                            ClientId = "6a15ca21-cccb-42ed-8f19-edd6934910c8",
                            DateTime = new DateTime(2022, 2, 28, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "280b2964-749e-4c67-9fa3-52d053d23cb9"
                        },
                        new
                        {
                            Id = new Guid("57636457-11f5-41f5-87dc-5010ea1b2a18"),
                            ClientId = "6a15ca21-cccb-42ed-8f19-edd6934910c8",
                            DateTime = new DateTime(2022, 2, 28, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "280b2964-749e-4c67-9fa3-52d053d23cb9"
                        },
                        new
                        {
                            Id = new Guid("a0c7d3f3-dc4d-48db-a66b-ed088463149c"),
                            ClientId = "6a15ca21-cccb-42ed-8f19-edd6934910c8",
                            DateTime = new DateTime(2022, 2, 28, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "280b2964-749e-4c67-9fa3-52d053d23cb9"
                        });
                });

            modelBuilder.Entity("OkOk.Models.Identity.ChatApplicationUser", b =>
                {
                    b.HasBaseType("OkOk.Models.Identity.ApplicationUser");

                    b.HasDiscriminator().HasValue("ChatApplicationUser");
                });

            modelBuilder.Entity("OkOk.Models.Identity.GuardianApplicationUser", b =>
                {
                    b.HasBaseType("OkOk.Models.Identity.ApplicationUser");

                    b.HasDiscriminator().HasValue("GuardianApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "9a1588e9-e19a-4a13-a9b8-e51c3039e338",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59367880-c9c5-41b1-887d-c8be87a16ed2",
                            Email = "guardianone@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Guardian",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUARDIANONE@OKOKAPP.NL",
                            NormalizedUserName = "GUARDIANONE@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEEK1+7su/R8+XEJDxQyprz2c95ZX3mvqHrvuuo/XKTAsjskLGlh1Gg2sL/du/NAGgQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "08503e43-e116-4b56-ad9a-56e863d1e02c",
                            TwoFactorEnabled = false,
                            UserName = "guardianone@okokapp.nl"
                        },
                        new
                        {
                            Id = "8235b4b5-7f18-466d-aca1-913fdc869705",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91d0dc3f-438f-4e1c-98e9-5a167ca7d961",
                            Email = "guardiantwo@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Guardian",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUARDIANTWO@OKOKAPP.NL",
                            NormalizedUserName = "GUARDIANTWO@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEAAaMVUHZNvAfxS/Djfp1TsheITB8zeD68f0PNgIvpU68+mhDZojtBi/rwEEdD01Yw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d00dee68-afe1-4452-916b-da5735209c6e",
                            TwoFactorEnabled = false,
                            UserName = "guardiantwo@okokapp.nl"
                        });
                });

            modelBuilder.Entity("OkOk.Models.Identity.ClientApplicationUser", b =>
                {
                    b.HasBaseType("OkOk.Models.Identity.ChatApplicationUser");

                    b.Property<Guid?>("AddressId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("OldEnough")
                        .HasColumnType("INTEGER");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("ClientApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "de8459c4-4062-4068-9856-256096919996",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36d8aa3a-25a1-4536-bce9-37ecb1a450a1",
                            Email = "clientone@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENTONE@OKOKAPP.NL",
                            NormalizedUserName = "CLIENTONE@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEDVVY6I4evYkROHM61cpgRgS7pFU/uvhBzlmGd0KvYXJl1HUCZUrMAIaBxVAcPvG5Q==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d9acc481-f9ef-4da4-9ba0-715c76c62193",
                            TwoFactorEnabled = false,
                            UserName = "clientone@okokapp.nl",
                            AddressId = new Guid("d59ed4f4-4a52-423b-9be2-789dabb0cd01"),
                            OldEnough = false
                        },
                        new
                        {
                            Id = "6a15ca21-cccb-42ed-8f19-edd6934910c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9c2c9bd-e873-4dfb-b138-b29817f55f62",
                            Email = "clienttwo@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENTTWO@OKOKAPP.NL",
                            NormalizedUserName = "CLIENTTWO@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAECAACz00t1edQeEBelPsieq5blo2j3NIZiouAGiWPq3UGbUanI3Q8GN3x36MxkTO/Q==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b8298d75-086b-4a45-88c0-e931d7ffdf28",
                            TwoFactorEnabled = false,
                            UserName = "clienttwo@okokapp.nl",
                            AddressId = new Guid("f8a551b0-0ab2-4d0a-b5dd-183b8a1fe571"),
                            OldEnough = false
                        });
                });

            modelBuilder.Entity("OkOk.Models.Identity.DoctorApplicationUser", b =>
                {
                    b.HasBaseType("OkOk.Models.Identity.ChatApplicationUser");

                    b.Property<string>("Specialism")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("DoctorApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "03065621-afd5-485b-a179-309f05a2f95c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9604c963-698e-4e4b-ab6c-9a7404bdffde",
                            Email = "doctorone@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Doctor",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTORONE@OKOKAPP.NL",
                            NormalizedUserName = "DOCTORONE@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEPrKeBlvY7I8erE9VERTpvlGuoDQSUtYDwcjbX8jxPTsyXaVRtQtd69jFaaO7NyyRA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7c53a1b1-8983-4298-9596-5fcc118482c1",
                            TwoFactorEnabled = false,
                            UserName = "doctorone@okokapp.nl",
                            Specialism = "Autisme"
                        },
                        new
                        {
                            Id = "280b2964-749e-4c67-9fa3-52d053d23cb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "895a40b3-a158-48e5-9e4f-380f22922f0b",
                            Email = "doctortwo@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Doctor",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTORTWO@OKOKAPP.NL",
                            NormalizedUserName = "DOCTORTWO@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEIUOcxtNWln+TO9Lh5stYovF14R/cwjFlKB5k3fJzpxa1DSfhQOUnIo/Fi0qEdcf0Q==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a6e3c09a-6031-47b5-9f2d-92d8d59a728e",
                            TwoFactorEnabled = false,
                            UserName = "doctortwo@okokapp.nl",
                            Specialism = "Autisme"
                        });
                });

            modelBuilder.Entity("ChatApplicationUserSupportGroup", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ChatApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ChatUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OkOk.Models.SupportGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuardianChild", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ClientApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Identity.GuardianApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageChatapplicationUser", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ChatApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ChatUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OkOk.Models.Message", b =>
                {
                    b.HasOne("OkOk.Models.SupportGroup", "SupportGroup")
                        .WithMany("Received")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OkOk.Models.Identity.ChatApplicationUser", "Sender")
                        .WithMany("Sent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("SupportGroup");
                });

            modelBuilder.Entity("OkOk.Models.MessageReport", b =>
                {
                    b.HasOne("OkOk.Models.Message", "Message")
                        .WithMany("MessageReports")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Report", "Report")
                        .WithOne("MessageReport")
                        .HasForeignKey("OkOk.Models.MessageReport", "ReportId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("OkOk.Models.SignUpRequest", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ClientApplicationUser", "ClientApplicationUser")
                        .WithOne("SignUpRequest")
                        .HasForeignKey("OkOk.Models.SignUpRequest", "ClientId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Identity.DoctorApplicationUser", "DoctorApplicationUser")
                        .WithMany("SignUpRequests")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("ClientApplicationUser");

                    b.Navigation("DoctorApplicationUser");
                });

            modelBuilder.Entity("OkOk.Models.Treatment", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ClientApplicationUser", "ClientApplicationUser")
                        .WithMany("Treatments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Identity.DoctorApplicationUser", "DoctorApplicationUser")
                        .WithMany("Treatments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("ClientApplicationUser");

                    b.Navigation("DoctorApplicationUser");
                });

            modelBuilder.Entity("OkOk.Models.Identity.ClientApplicationUser", b =>
                {
                    b.HasOne("OkOk.Models.Address", "Address")
                        .WithOne("ClientApplicationUser")
                        .HasForeignKey("OkOk.Models.Identity.ClientApplicationUser", "AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("OkOk.Models.Address", b =>
                {
                    b.Navigation("ClientApplicationUser");
                });

            modelBuilder.Entity("OkOk.Models.Message", b =>
                {
                    b.Navigation("MessageReports");
                });

            modelBuilder.Entity("OkOk.Models.Report", b =>
                {
                    b.Navigation("MessageReport");
                });

            modelBuilder.Entity("OkOk.Models.SupportGroup", b =>
                {
                    b.Navigation("Received");
                });

            modelBuilder.Entity("OkOk.Models.Identity.ChatApplicationUser", b =>
                {
                    b.Navigation("Sent");
                });

            modelBuilder.Entity("OkOk.Models.Identity.ClientApplicationUser", b =>
                {
                    b.Navigation("SignUpRequest");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("OkOk.Models.Identity.DoctorApplicationUser", b =>
                {
                    b.Navigation("SignUpRequests");

                    b.Navigation("Treatments");
                });
#pragma warning restore 612, 618
        }
    }
}
