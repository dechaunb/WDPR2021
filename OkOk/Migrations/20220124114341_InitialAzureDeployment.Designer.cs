// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OkOk.Data;

#nullable disable

namespace OkOk.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220124114341_InitialAzureDeployment")]
    partial class InitialAzureDeployment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("ChatApplicationUserSupportGroup", b =>
                {
                    b.Property<string>("ChatUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChatUserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ChatApplicationUserSupportGroup");
                });

            modelBuilder.Entity("GuardianChild", b =>
                {
                    b.Property<string>("ChildId")
                        .HasColumnType("TEXT");

                    b.Property<string>("GuardianId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChildId", "GuardianId");

                    b.HasIndex("GuardianId");

                    b.ToTable("GuardianChild");

                    b.HasData(
                        new
                        {
                            ChildId = "1316fdf4-ab3a-49a0-b6be-3edc9b7361e1",
                            GuardianId = "416b6e21-0bfb-494f-8db9-f7afe6f4437b"
                        },
                        new
                        {
                            ChildId = "0371109d-6705-4bea-baf4-b5b0f0076845",
                            GuardianId = "370c7cda-2387-4309-a96b-c3b169118ad9"
                        });
                });

            modelBuilder.Entity("MessageChatapplicationUser", b =>
                {
                    b.Property<string>("ChatUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChatUserId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageChatapplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2e27e5ad-8903-4eb4-86e9-b65d4265b645",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "9ade780e-7d19-446f-a73c-ba0e823c2408",
                            ConcurrencyStamp = "1",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "cdfee3a0-db09-481f-a9eb-7c0248030830",
                            ConcurrencyStamp = "1",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "a6c6f735-ac78-4c7a-9397-4048eef76f9f",
                            ConcurrencyStamp = "1",
                            Name = "Guardian",
                            NormalizedName = "GUARDIAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "af3e2f2f-fd13-4f74-8821-246bb1003ec0",
                            RoleId = "2e27e5ad-8903-4eb4-86e9-b65d4265b645"
                        },
                        new
                        {
                            UserId = "dc0cd687-6a58-43e3-95ae-af894531cef6",
                            RoleId = "2e27e5ad-8903-4eb4-86e9-b65d4265b645"
                        },
                        new
                        {
                            UserId = "1860b6f7-cc0f-4d4b-af5e-a64b973351c4",
                            RoleId = "2e27e5ad-8903-4eb4-86e9-b65d4265b645"
                        },
                        new
                        {
                            UserId = "c0c6c4ee-6a82-4a54-a74b-713d8ae5abb7",
                            RoleId = "9ade780e-7d19-446f-a73c-ba0e823c2408"
                        },
                        new
                        {
                            UserId = "a7594e4e-e53f-4af6-89b3-d430fcdad819",
                            RoleId = "9ade780e-7d19-446f-a73c-ba0e823c2408"
                        },
                        new
                        {
                            UserId = "1316fdf4-ab3a-49a0-b6be-3edc9b7361e1",
                            RoleId = "cdfee3a0-db09-481f-a9eb-7c0248030830"
                        },
                        new
                        {
                            UserId = "0371109d-6705-4bea-baf4-b5b0f0076845",
                            RoleId = "cdfee3a0-db09-481f-a9eb-7c0248030830"
                        },
                        new
                        {
                            UserId = "416b6e21-0bfb-494f-8db9-f7afe6f4437b",
                            RoleId = "a6c6f735-ac78-4c7a-9397-4048eef76f9f"
                        },
                        new
                        {
                            UserId = "370c7cda-2387-4309-a96b-c3b169118ad9",
                            RoleId = "a6c6f735-ac78-4c7a-9397-4048eef76f9f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OkOk.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HouseNumberAddition")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1a0bcee-d9e8-44fd-9e59-4f98f4df9394"),
                            City = "Dorp",
                            Country = "Nederland",
                            HouseNumber = 1,
                            Street = "Dorpsstraat",
                            ZipCode = "1234AB"
                        },
                        new
                        {
                            Id = new Guid("1557c261-7861-4bbc-8195-66dc66ed2208"),
                            City = "Dorp",
                            Country = "Nederland",
                            HouseNumber = 1,
                            Street = "Dorpsstraat",
                            ZipCode = "1234AB"
                        });
                });

            modelBuilder.Entity("OkOk.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LockedOutReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "af3e2f2f-fd13-4f74-8821-246bb1003ec0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e3edb26-4db4-45e7-9c5c-350055b6dcac",
                            Email = "angelo@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Angelo",
                            LastName = "OkOk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANGELO@OKOKAPP.NL",
                            NormalizedUserName = "ANGELO@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEMimGhIHIOo0mesN3LxhYSjNEycZsGH0ZJdKTCyAijBQWxsBIbOgJ2wYBysXiy59mg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5a43418e-6743-4fae-a880-29b680e801e6",
                            TwoFactorEnabled = false,
                            UserName = "angelo@okokapp.nl"
                        },
                        new
                        {
                            Id = "dc0cd687-6a58-43e3-95ae-af894531cef6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "abc3bce2-0242-49a9-920e-f94f55083aa1",
                            Email = "dechaun@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Dechaun",
                            LastName = "OkOk",
                            LockoutEnabled = false,
                            NormalizedEmail = "DECHAUN@OKOKAPP.NL",
                            NormalizedUserName = "DECHAUN@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEBEXNq1RSwo9LYMt4TFxmW1jIWLkiae0zqiEVIffjy7mRHNZsZ1xmJg8rTwMd+ucPg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3ace9313-86a0-4221-bfb0-67677df84f39",
                            TwoFactorEnabled = false,
                            UserName = "dechaun@okokapp.nl"
                        },
                        new
                        {
                            Id = "1860b6f7-cc0f-4d4b-af5e-a64b973351c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f98d04c6-668b-45da-a13f-24973ad246f4",
                            Email = "timothy@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Timothy",
                            LastName = "OkOk",
                            LockoutEnabled = false,
                            NormalizedEmail = "TIMOTHY@OKOKAPP.NL",
                            NormalizedUserName = "TIMOTHY@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ/lSRJn9YZvms7aCFXjPJfPmwUXGPY+kUsF273Tv6fmW6BMlP1idnlooU4QIWFdTA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a2473174-f3b6-4275-9e14-880e9ee76710",
                            TwoFactorEnabled = false,
                            UserName = "timothy@okokapp.nl"
                        });
                });

            modelBuilder.Entity("OkOk.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ece4974f-9d61-4cb3-b8d9-e4d3703aa4ef"),
                            Content = "Dit is een geseede message [1]",
                            DateTime = new DateTime(2022, 1, 24, 12, 43, 39, 856, DateTimeKind.Local).AddTicks(6961),
                            SenderId = "1316fdf4-ab3a-49a0-b6be-3edc9b7361e1"
                        },
                        new
                        {
                            Id = new Guid("bfe24eea-759c-48a5-a670-0b3b21794bdb"),
                            Content = "Dit is een geseede message [2]",
                            DateTime = new DateTime(2022, 1, 24, 12, 43, 39, 856, DateTimeKind.Local).AddTicks(7009),
                            SenderId = "1316fdf4-ab3a-49a0-b6be-3edc9b7361e1"
                        },
                        new
                        {
                            Id = new Guid("1e5d15e0-482c-4a2c-8a44-a4ed40ed49d1"),
                            Content = "Dit is een geseede message [3]",
                            DateTime = new DateTime(2022, 1, 24, 12, 43, 39, 856, DateTimeKind.Local).AddTicks(7022),
                            SenderId = "0371109d-6705-4bea-baf4-b5b0f0076845"
                        },
                        new
                        {
                            Id = new Guid("4ac60d49-4b77-4b73-8f4b-444161ab8b3f"),
                            Content = "Dit is een geseede message [4]",
                            DateTime = new DateTime(2022, 1, 24, 12, 43, 39, 856, DateTimeKind.Local).AddTicks(7046),
                            SenderId = "0371109d-6705-4bea-baf4-b5b0f0076845"
                        });
                });

            modelBuilder.Entity("OkOk.Models.MessageReport", b =>
                {
                    b.Property<Guid?>("MessageId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("TEXT");

                    b.HasKey("MessageId", "ReportId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("MessageReports");

                    b.HasData(
                        new
                        {
                            MessageId = new Guid("ece4974f-9d61-4cb3-b8d9-e4d3703aa4ef"),
                            ReportId = new Guid("c334bc9f-35ac-495a-a0a2-9f9b4abeb399")
                        },
                        new
                        {
                            MessageId = new Guid("ece4974f-9d61-4cb3-b8d9-e4d3703aa4ef"),
                            ReportId = new Guid("52283e15-72ea-47ea-bc78-9f956e2257e0")
                        },
                        new
                        {
                            MessageId = new Guid("ece4974f-9d61-4cb3-b8d9-e4d3703aa4ef"),
                            ReportId = new Guid("fb1edb04-f2b8-4a9d-b4eb-9c6ab4e5ead9")
                        },
                        new
                        {
                            MessageId = new Guid("1e5d15e0-482c-4a2c-8a44-a4ed40ed49d1"),
                            ReportId = new Guid("5d628531-df45-4283-a040-ee01b2017e35")
                        });
                });

            modelBuilder.Entity("OkOk.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Handled")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c334bc9f-35ac-495a-a0a2-9f9b4abeb399"),
                            Handled = false
                        },
                        new
                        {
                            Id = new Guid("52283e15-72ea-47ea-bc78-9f956e2257e0"),
                            Handled = false
                        },
                        new
                        {
                            Id = new Guid("fb1edb04-f2b8-4a9d-b4eb-9c6ab4e5ead9"),
                            Handled = false
                        },
                        new
                        {
                            Id = new Guid("5d628531-df45-4283-a040-ee01b2017e35"),
                            Handled = false
                        });
                });

            modelBuilder.Entity("OkOk.Models.SignUpRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Handled")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("DoctorId");

                    b.ToTable("SignUpRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("933648f4-4611-4f82-9628-f915942e322c"),
                            ClientId = "1316fdf4-ab3a-49a0-b6be-3edc9b7361e1",
                            DoctorId = "c0c6c4ee-6a82-4a54-a74b-713d8ae5abb7",
                            Handled = false
                        },
                        new
                        {
                            Id = new Guid("44c32b07-1e18-446e-acd8-aac2f0568455"),
                            ClientId = "0371109d-6705-4bea-baf4-b5b0f0076845",
                            DoctorId = "c0c6c4ee-6a82-4a54-a74b-713d8ae5abb7",
                            Handled = false
                        });
                });

            modelBuilder.Entity("OkOk.Models.SupportGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SupportGroups");
                });

            modelBuilder.Entity("OkOk.Models.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Treatments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c4522b9-4d37-4223-a306-aedc0e592995"),
                            ClientId = "1316fdf4-ab3a-49a0-b6be-3edc9b7361e1",
                            DateTime = new DateTime(2022, 1, 24, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "c0c6c4ee-6a82-4a54-a74b-713d8ae5abb7"
                        },
                        new
                        {
                            Id = new Guid("0cf76564-8e83-4fd4-8f13-cd8673e2a576"),
                            ClientId = "1316fdf4-ab3a-49a0-b6be-3edc9b7361e1",
                            DateTime = new DateTime(2022, 1, 24, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "c0c6c4ee-6a82-4a54-a74b-713d8ae5abb7"
                        },
                        new
                        {
                            Id = new Guid("8cddc0e0-6cab-4cb5-be47-559ba8024576"),
                            ClientId = "1316fdf4-ab3a-49a0-b6be-3edc9b7361e1",
                            DateTime = new DateTime(2022, 1, 24, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "c0c6c4ee-6a82-4a54-a74b-713d8ae5abb7"
                        },
                        new
                        {
                            Id = new Guid("2113760f-05d5-46db-9b8c-cc92bec31093"),
                            ClientId = "1316fdf4-ab3a-49a0-b6be-3edc9b7361e1",
                            DateTime = new DateTime(2022, 1, 11, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "c0c6c4ee-6a82-4a54-a74b-713d8ae5abb7"
                        },
                        new
                        {
                            Id = new Guid("b551d0e5-ae0b-446e-9e6a-4e730939e84e"),
                            ClientId = "1316fdf4-ab3a-49a0-b6be-3edc9b7361e1",
                            DateTime = new DateTime(2022, 1, 11, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "c0c6c4ee-6a82-4a54-a74b-713d8ae5abb7"
                        },
                        new
                        {
                            Id = new Guid("e28df4fb-4d89-4975-ba9b-15a27d07f6ba"),
                            ClientId = "1316fdf4-ab3a-49a0-b6be-3edc9b7361e1",
                            DateTime = new DateTime(2022, 1, 11, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "c0c6c4ee-6a82-4a54-a74b-713d8ae5abb7"
                        },
                        new
                        {
                            Id = new Guid("58e6939d-ad46-4e97-8a17-2994a9ad80f1"),
                            ClientId = "1316fdf4-ab3a-49a0-b6be-3edc9b7361e1",
                            DateTime = new DateTime(2022, 2, 28, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "c0c6c4ee-6a82-4a54-a74b-713d8ae5abb7"
                        },
                        new
                        {
                            Id = new Guid("138dabe9-584c-4438-a89d-1c4659203a93"),
                            ClientId = "1316fdf4-ab3a-49a0-b6be-3edc9b7361e1",
                            DateTime = new DateTime(2022, 2, 28, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "c0c6c4ee-6a82-4a54-a74b-713d8ae5abb7"
                        },
                        new
                        {
                            Id = new Guid("c9e693f6-3601-47cf-a749-a81008fe8750"),
                            ClientId = "1316fdf4-ab3a-49a0-b6be-3edc9b7361e1",
                            DateTime = new DateTime(2022, 2, 28, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "c0c6c4ee-6a82-4a54-a74b-713d8ae5abb7"
                        },
                        new
                        {
                            Id = new Guid("b8fb4a9c-243a-4f28-82bb-17328b8bf769"),
                            ClientId = "0371109d-6705-4bea-baf4-b5b0f0076845",
                            DateTime = new DateTime(2022, 1, 24, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "a7594e4e-e53f-4af6-89b3-d430fcdad819"
                        },
                        new
                        {
                            Id = new Guid("f59774a6-50e2-4a58-bf5e-93a79fa9055a"),
                            ClientId = "0371109d-6705-4bea-baf4-b5b0f0076845",
                            DateTime = new DateTime(2022, 1, 24, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "a7594e4e-e53f-4af6-89b3-d430fcdad819"
                        },
                        new
                        {
                            Id = new Guid("e36a6e2f-49d9-48d5-b090-7f180fdfae6e"),
                            ClientId = "0371109d-6705-4bea-baf4-b5b0f0076845",
                            DateTime = new DateTime(2022, 1, 24, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "a7594e4e-e53f-4af6-89b3-d430fcdad819"
                        },
                        new
                        {
                            Id = new Guid("7d1ce123-c4be-48bc-a530-6e7f10d29883"),
                            ClientId = "0371109d-6705-4bea-baf4-b5b0f0076845",
                            DateTime = new DateTime(2022, 1, 11, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "a7594e4e-e53f-4af6-89b3-d430fcdad819"
                        },
                        new
                        {
                            Id = new Guid("b88ab050-dadb-4419-b530-4bda05486d07"),
                            ClientId = "0371109d-6705-4bea-baf4-b5b0f0076845",
                            DateTime = new DateTime(2022, 1, 11, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "a7594e4e-e53f-4af6-89b3-d430fcdad819"
                        },
                        new
                        {
                            Id = new Guid("ee17f75e-eb3f-47df-b0b2-d86956b6430c"),
                            ClientId = "0371109d-6705-4bea-baf4-b5b0f0076845",
                            DateTime = new DateTime(2022, 1, 11, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "a7594e4e-e53f-4af6-89b3-d430fcdad819"
                        },
                        new
                        {
                            Id = new Guid("c6c97f19-7ac3-4fc4-a95d-7c2f3b55800b"),
                            ClientId = "0371109d-6705-4bea-baf4-b5b0f0076845",
                            DateTime = new DateTime(2022, 2, 28, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "a7594e4e-e53f-4af6-89b3-d430fcdad819"
                        },
                        new
                        {
                            Id = new Guid("e76b9823-9412-4375-8f58-5cf3171aeff4"),
                            ClientId = "0371109d-6705-4bea-baf4-b5b0f0076845",
                            DateTime = new DateTime(2022, 2, 28, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "a7594e4e-e53f-4af6-89b3-d430fcdad819"
                        },
                        new
                        {
                            Id = new Guid("e21be5f9-bcbc-44ed-bea8-fd16ba95119b"),
                            ClientId = "0371109d-6705-4bea-baf4-b5b0f0076845",
                            DateTime = new DateTime(2022, 2, 28, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "a7594e4e-e53f-4af6-89b3-d430fcdad819"
                        });
                });

            modelBuilder.Entity("OkOk.Models.Identity.ChatApplicationUser", b =>
                {
                    b.HasBaseType("OkOk.Models.Identity.ApplicationUser");

                    b.HasDiscriminator().HasValue("ChatApplicationUser");
                });

            modelBuilder.Entity("OkOk.Models.Identity.GuardianApplicationUser", b =>
                {
                    b.HasBaseType("OkOk.Models.Identity.ApplicationUser");

                    b.HasDiscriminator().HasValue("GuardianApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "416b6e21-0bfb-494f-8db9-f7afe6f4437b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb6b1933-93ef-49c4-844c-38770b9447a9",
                            Email = "guardianone@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Guardian",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUARDIANONE@OKOKAPP.NL",
                            NormalizedUserName = "GUARDIANONE@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEOGBJhXorNSE42C3RIhhi8luSkv8GHCJ1RHPryo+XTQOG6hJOOwAjZMpRn4YZ/Gv6g==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "f84e0ebf-d5dd-48ea-8a83-9885b3611426",
                            TwoFactorEnabled = false,
                            UserName = "guardianone@okokapp.nl"
                        },
                        new
                        {
                            Id = "370c7cda-2387-4309-a96b-c3b169118ad9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f29a9e1-1c6e-406c-9375-6a483e31268a",
                            Email = "guardiantwo@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Guardian",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUARDIANTWO@OKOKAPP.NL",
                            NormalizedUserName = "GUARDIANTWO@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEN+KlmErd9rcet9dxy9wvX1F3ltfNyCCSDg4H7Hjd0SfmrEmmAD9CVzd9+hSloJ9nQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d15674c8-e6c8-41b7-8450-30d0d7624304",
                            TwoFactorEnabled = false,
                            UserName = "guardiantwo@okokapp.nl"
                        });
                });

            modelBuilder.Entity("OkOk.Models.Identity.ClientApplicationUser", b =>
                {
                    b.HasBaseType("OkOk.Models.Identity.ChatApplicationUser");

                    b.Property<Guid?>("AddressId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("OldEnough")
                        .HasColumnType("INTEGER");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("ClientApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "1316fdf4-ab3a-49a0-b6be-3edc9b7361e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f83497d4-cb4e-4aa3-967d-435d4963fc4d",
                            Email = "clientone@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENTONE@OKOKAPP.NL",
                            NormalizedUserName = "CLIENTONE@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEAIl6KLuK5xMw/8CPGVghiO9+G4Z6oIixSAeJikVnDoST9f7clY2Jri4Zn44obZsrA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8b0a7ecf-2dc0-4436-84cf-e47ab66223d7",
                            TwoFactorEnabled = false,
                            UserName = "clientone@okokapp.nl",
                            AddressId = new Guid("d1a0bcee-d9e8-44fd-9e59-4f98f4df9394"),
                            OldEnough = false
                        },
                        new
                        {
                            Id = "0371109d-6705-4bea-baf4-b5b0f0076845",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6581c428-be95-45c4-8147-b077d175b0ad",
                            Email = "clienttwo@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENTTWO@OKOKAPP.NL",
                            NormalizedUserName = "CLIENTTWO@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEMq9G03ocpgGyuX4HSwqGmMH1t0Q38hRoJKud36veasfSvUQmO71LPdkKOE+7tTBYA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4f384ccb-07b5-4274-aab5-bf2f94da4ac7",
                            TwoFactorEnabled = false,
                            UserName = "clienttwo@okokapp.nl",
                            AddressId = new Guid("1557c261-7861-4bbc-8195-66dc66ed2208"),
                            OldEnough = false
                        });
                });

            modelBuilder.Entity("OkOk.Models.Identity.DoctorApplicationUser", b =>
                {
                    b.HasBaseType("OkOk.Models.Identity.ChatApplicationUser");

                    b.Property<string>("Specialism")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("DoctorApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "c0c6c4ee-6a82-4a54-a74b-713d8ae5abb7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ae2995a-d90a-4723-ab4e-6aac3bde5c6a",
                            Email = "doctorone@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Doctor",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTORONE@OKOKAPP.NL",
                            NormalizedUserName = "DOCTORONE@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEDf8P+pPvlS0FEVuVMtbmZaS1GMAXT21cT4+WPEp3VW8MaokHtqF20OpjAJTBB5OZA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "88dbdc96-a71e-4c6d-bdfa-56009b687289",
                            TwoFactorEnabled = false,
                            UserName = "doctorone@okokapp.nl",
                            Specialism = "Autisme"
                        },
                        new
                        {
                            Id = "a7594e4e-e53f-4af6-89b3-d430fcdad819",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88b0ff0d-95f4-4b93-871a-cf58361c67af",
                            Email = "doctortwo@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Doctor",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTORTWO@OKOKAPP.NL",
                            NormalizedUserName = "DOCTORTWO@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEJvEv7OuG9A7VWtjuWj/LLcxLWygLKJxPzdlcWV4AbZyqA6NJrL3W69KZvR9CsP0HQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "13453174-3630-4d62-9747-72bdb43b19aa",
                            TwoFactorEnabled = false,
                            UserName = "doctortwo@okokapp.nl",
                            Specialism = "Autisme"
                        });
                });

            modelBuilder.Entity("ChatApplicationUserSupportGroup", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ChatApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ChatUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OkOk.Models.SupportGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuardianChild", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ClientApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Identity.GuardianApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageChatapplicationUser", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ChatApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ChatUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OkOk.Models.Message", b =>
                {
                    b.HasOne("OkOk.Models.SupportGroup", "SupportGroup")
                        .WithMany("Received")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OkOk.Models.Identity.ChatApplicationUser", "Sender")
                        .WithMany("Sent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Sender");

                    b.Navigation("SupportGroup");
                });

            modelBuilder.Entity("OkOk.Models.MessageReport", b =>
                {
                    b.HasOne("OkOk.Models.Message", "Message")
                        .WithMany("MessageReports")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Report", "Report")
                        .WithOne("MessageReport")
                        .HasForeignKey("OkOk.Models.MessageReport", "ReportId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("OkOk.Models.SignUpRequest", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ClientApplicationUser", "ClientApplicationUser")
                        .WithOne("SignUpRequest")
                        .HasForeignKey("OkOk.Models.SignUpRequest", "ClientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OkOk.Models.Identity.DoctorApplicationUser", "DoctorApplicationUser")
                        .WithMany("SignUpRequests")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ClientApplicationUser");

                    b.Navigation("DoctorApplicationUser");
                });

            modelBuilder.Entity("OkOk.Models.Treatment", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ClientApplicationUser", "ClientApplicationUser")
                        .WithMany("Treatments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OkOk.Models.Identity.DoctorApplicationUser", "DoctorApplicationUser")
                        .WithMany("Treatments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ClientApplicationUser");

                    b.Navigation("DoctorApplicationUser");
                });

            modelBuilder.Entity("OkOk.Models.Identity.ClientApplicationUser", b =>
                {
                    b.HasOne("OkOk.Models.Address", "Address")
                        .WithOne("ClientApplicationUser")
                        .HasForeignKey("OkOk.Models.Identity.ClientApplicationUser", "AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("OkOk.Models.Address", b =>
                {
                    b.Navigation("ClientApplicationUser");
                });

            modelBuilder.Entity("OkOk.Models.Message", b =>
                {
                    b.Navigation("MessageReports");
                });

            modelBuilder.Entity("OkOk.Models.Report", b =>
                {
                    b.Navigation("MessageReport");
                });

            modelBuilder.Entity("OkOk.Models.SupportGroup", b =>
                {
                    b.Navigation("Received");
                });

            modelBuilder.Entity("OkOk.Models.Identity.ChatApplicationUser", b =>
                {
                    b.Navigation("Sent");
                });

            modelBuilder.Entity("OkOk.Models.Identity.ClientApplicationUser", b =>
                {
                    b.Navigation("SignUpRequest");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("OkOk.Models.Identity.DoctorApplicationUser", b =>
                {
                    b.Navigation("SignUpRequests");

                    b.Navigation("Treatments");
                });
#pragma warning restore 612, 618
        }
    }
}
