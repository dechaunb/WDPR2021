// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OkOk.Data;

#nullable disable

namespace OkOk.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220124101919_InitialWebAppCreate")]
    partial class InitialWebAppCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ChatApplicationUserSupportGroup", b =>
                {
                    b.Property<string>("ChatUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatUserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ChatApplicationUserSupportGroup");
                });

            modelBuilder.Entity("GuardianChild", b =>
                {
                    b.Property<string>("ChildId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GuardianId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChildId", "GuardianId");

                    b.HasIndex("GuardianId");

                    b.ToTable("GuardianChild");

                    b.HasData(
                        new
                        {
                            ChildId = "515ecb4b-67a6-452d-8d55-928f1bd76c58",
                            GuardianId = "9d0aad18-e632-45d2-9412-a8af6b400078"
                        },
                        new
                        {
                            ChildId = "2f6bc50b-3889-4bd5-949e-a54af81e44c1",
                            GuardianId = "92c83641-7e8a-44f1-908c-e46000426b2b"
                        });
                });

            modelBuilder.Entity("MessageChatapplicationUser", b =>
                {
                    b.Property<string>("ChatUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatUserId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageChatapplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d3cb8512-d11c-45eb-a72d-ba4ba3edad81",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "afd50f9e-b32d-4595-a8ab-2002a9b6b309",
                            ConcurrencyStamp = "1",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "e98e074f-6fff-4854-8717-0622310e9498",
                            ConcurrencyStamp = "1",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "59c6519c-b661-49ce-897f-8f6a748efb5a",
                            ConcurrencyStamp = "1",
                            Name = "Guardian",
                            NormalizedName = "GUARDIAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "81db857f-158c-40af-9425-33c28f561402",
                            RoleId = "d3cb8512-d11c-45eb-a72d-ba4ba3edad81"
                        },
                        new
                        {
                            UserId = "3eef6450-6406-4820-8e6b-6c23e27b0ea8",
                            RoleId = "d3cb8512-d11c-45eb-a72d-ba4ba3edad81"
                        },
                        new
                        {
                            UserId = "84a7995c-76c7-4312-94a4-ade11032c6f5",
                            RoleId = "d3cb8512-d11c-45eb-a72d-ba4ba3edad81"
                        },
                        new
                        {
                            UserId = "8c53a982-ac5b-4879-a8b3-3cd0f739f35a",
                            RoleId = "afd50f9e-b32d-4595-a8ab-2002a9b6b309"
                        },
                        new
                        {
                            UserId = "80105c0c-5018-40e5-af82-87cd5e9cf2b5",
                            RoleId = "afd50f9e-b32d-4595-a8ab-2002a9b6b309"
                        },
                        new
                        {
                            UserId = "515ecb4b-67a6-452d-8d55-928f1bd76c58",
                            RoleId = "e98e074f-6fff-4854-8717-0622310e9498"
                        },
                        new
                        {
                            UserId = "2f6bc50b-3889-4bd5-949e-a54af81e44c1",
                            RoleId = "e98e074f-6fff-4854-8717-0622310e9498"
                        },
                        new
                        {
                            UserId = "9d0aad18-e632-45d2-9412-a8af6b400078",
                            RoleId = "59c6519c-b661-49ce-897f-8f6a748efb5a"
                        },
                        new
                        {
                            UserId = "92c83641-7e8a-44f1-908c-e46000426b2b",
                            RoleId = "59c6519c-b661-49ce-897f-8f6a748efb5a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OkOk.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<string>("HouseNumberAddition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0ea30dd-95d6-46df-9f09-064aedf54785"),
                            City = "Dorp",
                            Country = "Nederland",
                            HouseNumber = 1,
                            Street = "Dorpsstraat",
                            ZipCode = "1234AB"
                        },
                        new
                        {
                            Id = new Guid("ae53d356-69e9-404b-a710-4b0d96db1b43"),
                            City = "Dorp",
                            Country = "Nederland",
                            HouseNumber = 1,
                            Street = "Dorpsstraat",
                            ZipCode = "1234AB"
                        });
                });

            modelBuilder.Entity("OkOk.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LockedOutReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "81db857f-158c-40af-9425-33c28f561402",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3182880-8f71-45ea-883f-885758438bf1",
                            Email = "angelo@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Angelo",
                            LastName = "OkOk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANGELO@OKOKAPP.NL",
                            NormalizedUserName = "ANGELO@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEHErUlIwpUy94hww6+3wRI8rGMjlky2VGigCcoyHidZD4NdamStAJA8A9ULvQMZnpQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "05222ec1-d841-43ea-96da-0eb091f047e4",
                            TwoFactorEnabled = false,
                            UserName = "angelo@okokapp.nl"
                        },
                        new
                        {
                            Id = "3eef6450-6406-4820-8e6b-6c23e27b0ea8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "abf8cf8a-ca0d-464c-b84c-c121b1bedfdf",
                            Email = "dechaun@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Dechaun",
                            LastName = "OkOk",
                            LockoutEnabled = false,
                            NormalizedEmail = "DECHAUN@OKOKAPP.NL",
                            NormalizedUserName = "DECHAUN@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEOWk/4W8vxsbYwexwRLb6idmNPDT1idO4NR3aJQRYddIwuWaiC1MjqGGLhswCuFZuA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d0f22e03-102f-4724-a959-110559979c89",
                            TwoFactorEnabled = false,
                            UserName = "dechaun@okokapp.nl"
                        },
                        new
                        {
                            Id = "84a7995c-76c7-4312-94a4-ade11032c6f5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dbf3137a-f150-4e94-8048-51aca2c7598f",
                            Email = "timothy@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Timothy",
                            LastName = "OkOk",
                            LockoutEnabled = false,
                            NormalizedEmail = "TIMOTHY@OKOKAPP.NL",
                            NormalizedUserName = "TIMOTHY@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEJj8YHvaR278tlTwW9KBSS8pS84ImQiKmGNxcG9ozV/B4Bpexxqet/TBl1BxWekvmw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6d2877bd-cf54-42f3-867f-b4ac7326bcee",
                            TwoFactorEnabled = false,
                            UserName = "timothy@okokapp.nl"
                        });
                });

            modelBuilder.Entity("OkOk.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("518b2793-f3a8-4bea-be3c-9e5429de7264"),
                            Content = "Dit is een geseede message [1]",
                            DateTime = new DateTime(2022, 1, 24, 11, 19, 18, 662, DateTimeKind.Local).AddTicks(1233),
                            SenderId = "515ecb4b-67a6-452d-8d55-928f1bd76c58"
                        },
                        new
                        {
                            Id = new Guid("d1d970c6-cc18-4011-afcc-bf6c82c52bf0"),
                            Content = "Dit is een geseede message [2]",
                            DateTime = new DateTime(2022, 1, 24, 11, 19, 18, 662, DateTimeKind.Local).AddTicks(1244),
                            SenderId = "515ecb4b-67a6-452d-8d55-928f1bd76c58"
                        },
                        new
                        {
                            Id = new Guid("0efc54d8-2369-4c99-96ad-d96c37e181e3"),
                            Content = "Dit is een geseede message [3]",
                            DateTime = new DateTime(2022, 1, 24, 11, 19, 18, 662, DateTimeKind.Local).AddTicks(1248),
                            SenderId = "2f6bc50b-3889-4bd5-949e-a54af81e44c1"
                        },
                        new
                        {
                            Id = new Guid("80320823-bfee-4948-95f7-cd45970893eb"),
                            Content = "Dit is een geseede message [4]",
                            DateTime = new DateTime(2022, 1, 24, 11, 19, 18, 662, DateTimeKind.Local).AddTicks(1252),
                            SenderId = "2f6bc50b-3889-4bd5-949e-a54af81e44c1"
                        });
                });

            modelBuilder.Entity("OkOk.Models.MessageReport", b =>
                {
                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MessageId", "ReportId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("MessageReports");

                    b.HasData(
                        new
                        {
                            MessageId = new Guid("518b2793-f3a8-4bea-be3c-9e5429de7264"),
                            ReportId = new Guid("40381add-e7f6-49cd-ba65-9a3a63993de8")
                        },
                        new
                        {
                            MessageId = new Guid("518b2793-f3a8-4bea-be3c-9e5429de7264"),
                            ReportId = new Guid("fff0cb7f-4794-4601-a114-b83a3bd38eab")
                        },
                        new
                        {
                            MessageId = new Guid("518b2793-f3a8-4bea-be3c-9e5429de7264"),
                            ReportId = new Guid("b0290c51-f347-4604-9d55-f705daba7371")
                        },
                        new
                        {
                            MessageId = new Guid("0efc54d8-2369-4c99-96ad-d96c37e181e3"),
                            ReportId = new Guid("3ca3ef8f-8256-4a60-bb8f-da080e98b53f")
                        });
                });

            modelBuilder.Entity("OkOk.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Handled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40381add-e7f6-49cd-ba65-9a3a63993de8"),
                            Handled = false
                        },
                        new
                        {
                            Id = new Guid("fff0cb7f-4794-4601-a114-b83a3bd38eab"),
                            Handled = false
                        },
                        new
                        {
                            Id = new Guid("b0290c51-f347-4604-9d55-f705daba7371"),
                            Handled = false
                        },
                        new
                        {
                            Id = new Guid("3ca3ef8f-8256-4a60-bb8f-da080e98b53f"),
                            Handled = false
                        });
                });

            modelBuilder.Entity("OkOk.Models.SignUpRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Handled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.HasIndex("DoctorId");

                    b.ToTable("SignUpRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d75e1b49-f870-4a37-9fa2-dc013a7c16d1"),
                            ClientId = "515ecb4b-67a6-452d-8d55-928f1bd76c58",
                            DoctorId = "8c53a982-ac5b-4879-a8b3-3cd0f739f35a",
                            Handled = false
                        },
                        new
                        {
                            Id = new Guid("af4e9136-526d-41e4-af5a-f9f26c95257f"),
                            ClientId = "2f6bc50b-3889-4bd5-949e-a54af81e44c1",
                            DoctorId = "8c53a982-ac5b-4879-a8b3-3cd0f739f35a",
                            Handled = false
                        });
                });

            modelBuilder.Entity("OkOk.Models.SupportGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SupportGroups");
                });

            modelBuilder.Entity("OkOk.Models.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Treatments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9298aaed-e91b-4cd8-a607-dda7c8b849b9"),
                            ClientId = "515ecb4b-67a6-452d-8d55-928f1bd76c58",
                            DateTime = new DateTime(2022, 1, 24, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "8c53a982-ac5b-4879-a8b3-3cd0f739f35a"
                        },
                        new
                        {
                            Id = new Guid("890020da-e86e-44ed-ba6b-3c8053b4d1f4"),
                            ClientId = "515ecb4b-67a6-452d-8d55-928f1bd76c58",
                            DateTime = new DateTime(2022, 1, 24, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "8c53a982-ac5b-4879-a8b3-3cd0f739f35a"
                        },
                        new
                        {
                            Id = new Guid("1691c211-b2f0-4e1b-90db-a4ccc07924bf"),
                            ClientId = "515ecb4b-67a6-452d-8d55-928f1bd76c58",
                            DateTime = new DateTime(2022, 1, 24, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "8c53a982-ac5b-4879-a8b3-3cd0f739f35a"
                        },
                        new
                        {
                            Id = new Guid("08c340fe-0a9c-4e74-b657-738fe7286cb0"),
                            ClientId = "515ecb4b-67a6-452d-8d55-928f1bd76c58",
                            DateTime = new DateTime(2022, 1, 11, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "8c53a982-ac5b-4879-a8b3-3cd0f739f35a"
                        },
                        new
                        {
                            Id = new Guid("87d8cf00-b794-4fcd-bba4-ee808072e3ec"),
                            ClientId = "515ecb4b-67a6-452d-8d55-928f1bd76c58",
                            DateTime = new DateTime(2022, 1, 11, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "8c53a982-ac5b-4879-a8b3-3cd0f739f35a"
                        },
                        new
                        {
                            Id = new Guid("148e3fbc-87c7-4170-8ad9-8f5961ea0fd0"),
                            ClientId = "515ecb4b-67a6-452d-8d55-928f1bd76c58",
                            DateTime = new DateTime(2022, 1, 11, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "8c53a982-ac5b-4879-a8b3-3cd0f739f35a"
                        },
                        new
                        {
                            Id = new Guid("c89f3137-e2fd-4f28-baae-8fee737066c8"),
                            ClientId = "515ecb4b-67a6-452d-8d55-928f1bd76c58",
                            DateTime = new DateTime(2022, 2, 28, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "8c53a982-ac5b-4879-a8b3-3cd0f739f35a"
                        },
                        new
                        {
                            Id = new Guid("7efc4872-68b1-4ba1-a912-6a43e7c68f6a"),
                            ClientId = "515ecb4b-67a6-452d-8d55-928f1bd76c58",
                            DateTime = new DateTime(2022, 2, 28, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "8c53a982-ac5b-4879-a8b3-3cd0f739f35a"
                        },
                        new
                        {
                            Id = new Guid("ecae555f-f38e-4c69-93b2-d5da71cfd23a"),
                            ClientId = "515ecb4b-67a6-452d-8d55-928f1bd76c58",
                            DateTime = new DateTime(2022, 2, 28, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "8c53a982-ac5b-4879-a8b3-3cd0f739f35a"
                        },
                        new
                        {
                            Id = new Guid("f697a84b-ffbf-4720-8118-f4cf264b8e4b"),
                            ClientId = "2f6bc50b-3889-4bd5-949e-a54af81e44c1",
                            DateTime = new DateTime(2022, 1, 24, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "80105c0c-5018-40e5-af82-87cd5e9cf2b5"
                        },
                        new
                        {
                            Id = new Guid("f299ebf4-4d09-44bf-b71d-cc2f7ca9ff88"),
                            ClientId = "2f6bc50b-3889-4bd5-949e-a54af81e44c1",
                            DateTime = new DateTime(2022, 1, 24, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "80105c0c-5018-40e5-af82-87cd5e9cf2b5"
                        },
                        new
                        {
                            Id = new Guid("a20908e0-4c8d-424d-99dc-ee9f6fb1be48"),
                            ClientId = "2f6bc50b-3889-4bd5-949e-a54af81e44c1",
                            DateTime = new DateTime(2022, 1, 24, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "80105c0c-5018-40e5-af82-87cd5e9cf2b5"
                        },
                        new
                        {
                            Id = new Guid("5ea37995-847f-45b4-a874-d429e0a70c4e"),
                            ClientId = "2f6bc50b-3889-4bd5-949e-a54af81e44c1",
                            DateTime = new DateTime(2022, 1, 11, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "80105c0c-5018-40e5-af82-87cd5e9cf2b5"
                        },
                        new
                        {
                            Id = new Guid("f5f333ba-7760-4a52-814a-7e9941eb27f3"),
                            ClientId = "2f6bc50b-3889-4bd5-949e-a54af81e44c1",
                            DateTime = new DateTime(2022, 1, 11, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "80105c0c-5018-40e5-af82-87cd5e9cf2b5"
                        },
                        new
                        {
                            Id = new Guid("7bfdeccb-03f6-4bd0-9664-6ab1323c479f"),
                            ClientId = "2f6bc50b-3889-4bd5-949e-a54af81e44c1",
                            DateTime = new DateTime(2022, 1, 11, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "80105c0c-5018-40e5-af82-87cd5e9cf2b5"
                        },
                        new
                        {
                            Id = new Guid("8651eb2c-fcee-4fba-8d90-c5b75b8b71c4"),
                            ClientId = "2f6bc50b-3889-4bd5-949e-a54af81e44c1",
                            DateTime = new DateTime(2022, 2, 28, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "80105c0c-5018-40e5-af82-87cd5e9cf2b5"
                        },
                        new
                        {
                            Id = new Guid("5fd60fa0-908f-472d-a7c3-a733ffe01fd1"),
                            ClientId = "2f6bc50b-3889-4bd5-949e-a54af81e44c1",
                            DateTime = new DateTime(2022, 2, 28, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "80105c0c-5018-40e5-af82-87cd5e9cf2b5"
                        },
                        new
                        {
                            Id = new Guid("3796214b-b6dc-4c26-8c89-c9d74c726bb4"),
                            ClientId = "2f6bc50b-3889-4bd5-949e-a54af81e44c1",
                            DateTime = new DateTime(2022, 2, 28, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "80105c0c-5018-40e5-af82-87cd5e9cf2b5"
                        });
                });

            modelBuilder.Entity("OkOk.Models.Identity.ChatApplicationUser", b =>
                {
                    b.HasBaseType("OkOk.Models.Identity.ApplicationUser");

                    b.HasDiscriminator().HasValue("ChatApplicationUser");
                });

            modelBuilder.Entity("OkOk.Models.Identity.GuardianApplicationUser", b =>
                {
                    b.HasBaseType("OkOk.Models.Identity.ApplicationUser");

                    b.HasDiscriminator().HasValue("GuardianApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "9d0aad18-e632-45d2-9412-a8af6b400078",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2eeb9cf2-b0ac-461c-b680-ef8f369621fa",
                            Email = "guardianone@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Guardian",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUARDIANONE@OKOKAPP.NL",
                            NormalizedUserName = "GUARDIANONE@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEJiijGuxgnmHtyRyQ942RebcwN3trC3J74vjdc5/QauCKj3IuDGvmnVKBPf5+0PEDg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0fda0fbe-ee7f-4ef5-81e9-a7b3a323a02a",
                            TwoFactorEnabled = false,
                            UserName = "guardianone@okokapp.nl"
                        },
                        new
                        {
                            Id = "92c83641-7e8a-44f1-908c-e46000426b2b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a790569-8d96-4d3c-a4ea-388b3067ba6a",
                            Email = "guardiantwo@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Guardian",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUARDIANTWO@OKOKAPP.NL",
                            NormalizedUserName = "GUARDIANTWO@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEFnHCayTgl6ouvNG7P6gNo6gWSX9vaTnElKSQLNetzzNYMCCQwOx13mnGSXRIAnLGw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "65bd26c0-8f87-4039-bc5b-cd519002b203",
                            TwoFactorEnabled = false,
                            UserName = "guardiantwo@okokapp.nl"
                        });
                });

            modelBuilder.Entity("OkOk.Models.Identity.ClientApplicationUser", b =>
                {
                    b.HasBaseType("OkOk.Models.Identity.ChatApplicationUser");

                    b.Property<Guid?>("AddressId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("OldEnough")
                        .HasColumnType("bit");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("ClientApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "515ecb4b-67a6-452d-8d55-928f1bd76c58",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22a5f00f-15f4-4607-819c-9a653ce15505",
                            Email = "clientone@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENTONE@OKOKAPP.NL",
                            NormalizedUserName = "CLIENTONE@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEMV0a3UXlQzyzA4KfXAhwJsrpKfmgA28VPO3EU/BA1PQFw8jWOKTl6itHWEFVYDkaw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "910a57ac-f3dc-4ee9-8c4c-9975e88d6799",
                            TwoFactorEnabled = false,
                            UserName = "clientone@okokapp.nl",
                            AddressId = new Guid("b0ea30dd-95d6-46df-9f09-064aedf54785"),
                            OldEnough = false
                        },
                        new
                        {
                            Id = "2f6bc50b-3889-4bd5-949e-a54af81e44c1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3cf1ed2c-458a-4ed4-a51e-b82d0016c3a6",
                            Email = "clienttwo@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENTTWO@OKOKAPP.NL",
                            NormalizedUserName = "CLIENTTWO@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEMosDZbgcyVdTFoZVcJst5Cx0F7nR0YkkUvNSKZAXZkgyIujZl6yqCAvOXh+Lvgnfg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6adcfe42-3faf-422c-91f3-b543611648ea",
                            TwoFactorEnabled = false,
                            UserName = "clienttwo@okokapp.nl",
                            AddressId = new Guid("ae53d356-69e9-404b-a710-4b0d96db1b43"),
                            OldEnough = false
                        });
                });

            modelBuilder.Entity("OkOk.Models.Identity.DoctorApplicationUser", b =>
                {
                    b.HasBaseType("OkOk.Models.Identity.ChatApplicationUser");

                    b.Property<string>("Specialism")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("DoctorApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "8c53a982-ac5b-4879-a8b3-3cd0f739f35a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5b0b0ab-7134-4ba5-aee6-57b2c54d4d5a",
                            Email = "doctorone@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Doctor",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTORONE@OKOKAPP.NL",
                            NormalizedUserName = "DOCTORONE@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAENT4w7zueA1cfF+Ev3S87XPGzJNjtS6FeeY4XdUG0G8IaqTXKoMR6SDCvKaYlIhwbg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c76aaca4-f515-419e-be53-917ad6744cef",
                            TwoFactorEnabled = false,
                            UserName = "doctorone@okokapp.nl",
                            Specialism = "Autisme"
                        },
                        new
                        {
                            Id = "80105c0c-5018-40e5-af82-87cd5e9cf2b5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "046f81f7-ad5a-408e-a4bd-930262a09d17",
                            Email = "doctortwo@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Doctor",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTORTWO@OKOKAPP.NL",
                            NormalizedUserName = "DOCTORTWO@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAECJ/TSC+sT8Jpx8zsg0oJpY6UzpKDCaAAT2jF8OhIQ1yjHCdM1CaiPTYELq5Gy2oYA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "35c2b4cc-761d-450b-99f4-8d1d661e98c0",
                            TwoFactorEnabled = false,
                            UserName = "doctortwo@okokapp.nl",
                            Specialism = "Autisme"
                        });
                });

            modelBuilder.Entity("ChatApplicationUserSupportGroup", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ChatApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ChatUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OkOk.Models.SupportGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuardianChild", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ClientApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Identity.GuardianApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageChatapplicationUser", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ChatApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ChatUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OkOk.Models.Message", b =>
                {
                    b.HasOne("OkOk.Models.SupportGroup", "SupportGroup")
                        .WithMany("Received")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("OkOk.Models.Identity.ChatApplicationUser", "Sender")
                        .WithMany("Sent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Sender");

                    b.Navigation("SupportGroup");
                });

            modelBuilder.Entity("OkOk.Models.MessageReport", b =>
                {
                    b.HasOne("OkOk.Models.Message", "Message")
                        .WithMany("MessageReports")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Report", "Report")
                        .WithOne("MessageReport")
                        .HasForeignKey("OkOk.Models.MessageReport", "ReportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("OkOk.Models.SignUpRequest", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ClientApplicationUser", "ClientApplicationUser")
                        .WithOne("SignUpRequest")
                        .HasForeignKey("OkOk.Models.SignUpRequest", "ClientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("OkOk.Models.Identity.DoctorApplicationUser", "DoctorApplicationUser")
                        .WithMany("SignUpRequests")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ClientApplicationUser");

                    b.Navigation("DoctorApplicationUser");
                });

            modelBuilder.Entity("OkOk.Models.Treatment", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ClientApplicationUser", "ClientApplicationUser")
                        .WithMany("Treatments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("OkOk.Models.Identity.DoctorApplicationUser", "DoctorApplicationUser")
                        .WithMany("Treatments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ClientApplicationUser");

                    b.Navigation("DoctorApplicationUser");
                });

            modelBuilder.Entity("OkOk.Models.Identity.ClientApplicationUser", b =>
                {
                    b.HasOne("OkOk.Models.Address", "Address")
                        .WithOne("ClientApplicationUser")
                        .HasForeignKey("OkOk.Models.Identity.ClientApplicationUser", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("OkOk.Models.Address", b =>
                {
                    b.Navigation("ClientApplicationUser");
                });

            modelBuilder.Entity("OkOk.Models.Message", b =>
                {
                    b.Navigation("MessageReports");
                });

            modelBuilder.Entity("OkOk.Models.Report", b =>
                {
                    b.Navigation("MessageReport");
                });

            modelBuilder.Entity("OkOk.Models.SupportGroup", b =>
                {
                    b.Navigation("Received");
                });

            modelBuilder.Entity("OkOk.Models.Identity.ChatApplicationUser", b =>
                {
                    b.Navigation("Sent");
                });

            modelBuilder.Entity("OkOk.Models.Identity.ClientApplicationUser", b =>
                {
                    b.Navigation("SignUpRequest");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("OkOk.Models.Identity.DoctorApplicationUser", b =>
                {
                    b.Navigation("SignUpRequests");

                    b.Navigation("Treatments");
                });
#pragma warning restore 612, 618
        }
    }
}
