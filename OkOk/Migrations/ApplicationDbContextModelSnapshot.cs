// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OkOk.Data;

#nullable disable

namespace OkOk.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("ChatApplicationUserSupportGroup", b =>
                {
                    b.Property<string>("ChatUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChatUserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ChatApplicationUserSupportGroup");
                });

            modelBuilder.Entity("GuardianChild", b =>
                {
                    b.Property<string>("ChildId")
                        .HasColumnType("TEXT");

                    b.Property<string>("GuardianId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChildId", "GuardianId");

                    b.HasIndex("GuardianId");

                    b.ToTable("GuardianChild");

                    b.HasData(
                        new
                        {
                            ChildId = "720407f4-7258-4ea7-9b48-248236068846",
                            GuardianId = "58380249-7ae0-4acb-8a6f-ea8538cf71d4"
                        },
                        new
                        {
                            ChildId = "2dd3a743-1183-4ce5-b5b8-b63398f7cd20",
                            GuardianId = "840ef66d-11a4-47a8-af7e-9ad16ab34d67"
                        });
                });

            modelBuilder.Entity("MessageChatapplicationUser", b =>
                {
                    b.Property<string>("ChatUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChatUserId", "MessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageChatapplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "edfb3daa-fba1-4bf2-853c-8c55cfbdede9",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "39ceb643-fa38-4f80-89b6-d7906f3e1df9",
                            ConcurrencyStamp = "1",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "fe0f0271-dc88-4274-b980-befced3a17bc",
                            ConcurrencyStamp = "1",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "30ba2c54-c4d3-4bfb-8400-8e9c1eb9a177",
                            RoleId = "edfb3daa-fba1-4bf2-853c-8c55cfbdede9"
                        },
                        new
                        {
                            UserId = "d6ce7a95-df3d-4008-929a-c7867e05216a",
                            RoleId = "edfb3daa-fba1-4bf2-853c-8c55cfbdede9"
                        },
                        new
                        {
                            UserId = "aebddf58-ffc4-445d-8606-a0cf78a5263d",
                            RoleId = "edfb3daa-fba1-4bf2-853c-8c55cfbdede9"
                        },
                        new
                        {
                            UserId = "2b7ef106-96bc-4faa-ab48-5ab29e9a9447",
                            RoleId = "39ceb643-fa38-4f80-89b6-d7906f3e1df9"
                        },
                        new
                        {
                            UserId = "c427ade3-3d27-4023-8fd5-46fbab6e7a6f",
                            RoleId = "39ceb643-fa38-4f80-89b6-d7906f3e1df9"
                        },
                        new
                        {
                            UserId = "720407f4-7258-4ea7-9b48-248236068846",
                            RoleId = "fe0f0271-dc88-4274-b980-befced3a17bc"
                        },
                        new
                        {
                            UserId = "2dd3a743-1183-4ce5-b5b8-b63398f7cd20",
                            RoleId = "fe0f0271-dc88-4274-b980-befced3a17bc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OkOk.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HouseNumberAddition")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("029214ef-1367-4d6c-aab1-7f7d7f0ed813"),
                            City = "Dorp",
                            Country = "Nederland",
                            HouseNumber = 1,
                            Street = "Dorpsstraat",
                            ZipCode = "1234AB"
                        },
                        new
                        {
                            Id = new Guid("ade6035d-2456-4a17-a031-e6a3c1e633c9"),
                            City = "Dorp",
                            Country = "Nederland",
                            HouseNumber = 1,
                            Street = "Dorpsstraat",
                            ZipCode = "1234AB"
                        });
                });

            modelBuilder.Entity("OkOk.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LockedOutReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "30ba2c54-c4d3-4bfb-8400-8e9c1eb9a177",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1057ab8-73cc-429d-89f1-6241d08a10a6",
                            Email = "angelo@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Angelo",
                            LastName = "OkOk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANGELO@OKOKAPP.NL",
                            NormalizedUserName = "ANGELO@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEO/G8R9gE6Pw4HdHTpghxakrSAqaMxqF4Hx7b4t3QFEmZn9ha8Mn96kYpqbejRsduQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6f786448-ef21-4f14-97f3-5d8a9e3b4761",
                            TwoFactorEnabled = false,
                            UserName = "angelo@okokapp.nl"
                        },
                        new
                        {
                            Id = "d6ce7a95-df3d-4008-929a-c7867e05216a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37714b5a-063d-4790-9228-29ed60e59826",
                            Email = "dechaun@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Dechaun",
                            LastName = "OkOk",
                            LockoutEnabled = false,
                            NormalizedEmail = "DECHAUN@OKOKAPP.NL",
                            NormalizedUserName = "DECHAUN@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAELvymvyFe0hgkHFV/3i0Ly5YD7h/gtaCI7UWSrN6zT+IQxLx+ulZw+nxrHBlsRObUA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e9d9aa7e-8e56-4375-866a-a09c35b472ee",
                            TwoFactorEnabled = false,
                            UserName = "dechaun@okokapp.nl"
                        },
                        new
                        {
                            Id = "aebddf58-ffc4-445d-8606-a0cf78a5263d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73bd2770-3e41-4dee-8dbb-24c4eb791b8e",
                            Email = "timothy@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Timothy",
                            LastName = "OkOk",
                            LockoutEnabled = false,
                            NormalizedEmail = "TIMOTHY@OKOKAPP.NL",
                            NormalizedUserName = "TIMOTHY@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEMHdzYtHRk+XegMgyoq+LcecH7obD8zbSawIKJYzEQ4H2H26xGOVoe5RG1BAvPfYog==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5cf9d104-abb3-46fb-8e05-b061f79a5138",
                            TwoFactorEnabled = false,
                            UserName = "timothy@okokapp.nl"
                        });
                });

            modelBuilder.Entity("OkOk.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78583d2a-fc58-4670-a0f8-9c2e5e860b5f"),
                            Content = "Dit is een geseede message [1]",
                            DateTime = new DateTime(2022, 1, 20, 20, 41, 15, 557, DateTimeKind.Local).AddTicks(2798),
                            SenderId = "720407f4-7258-4ea7-9b48-248236068846"
                        },
                        new
                        {
                            Id = new Guid("27372a87-0b13-4567-82e0-7ddad7210b5d"),
                            Content = "Dit is een geseede message [2]",
                            DateTime = new DateTime(2022, 1, 20, 20, 41, 15, 557, DateTimeKind.Local).AddTicks(2808),
                            SenderId = "720407f4-7258-4ea7-9b48-248236068846"
                        },
                        new
                        {
                            Id = new Guid("212f8194-0019-4a32-acf7-aea61f497571"),
                            Content = "Dit is een geseede message [3]",
                            DateTime = new DateTime(2022, 1, 20, 20, 41, 15, 557, DateTimeKind.Local).AddTicks(2810),
                            SenderId = "2dd3a743-1183-4ce5-b5b8-b63398f7cd20"
                        },
                        new
                        {
                            Id = new Guid("c18f2561-63c1-45ab-9ea6-fbdfc3f003b5"),
                            Content = "Dit is een geseede message [4]",
                            DateTime = new DateTime(2022, 1, 20, 20, 41, 15, 557, DateTimeKind.Local).AddTicks(2813),
                            SenderId = "2dd3a743-1183-4ce5-b5b8-b63398f7cd20"
                        });
                });

            modelBuilder.Entity("OkOk.Models.MessageReport", b =>
                {
                    b.Property<Guid?>("MessageId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("TEXT");

                    b.HasKey("MessageId", "ReportId");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("MessageReports");

                    b.HasData(
                        new
                        {
                            MessageId = new Guid("78583d2a-fc58-4670-a0f8-9c2e5e860b5f"),
                            ReportId = new Guid("11a7f39b-fb24-475c-8e1e-c1639e98abac")
                        },
                        new
                        {
                            MessageId = new Guid("78583d2a-fc58-4670-a0f8-9c2e5e860b5f"),
                            ReportId = new Guid("0b158b7a-2b6a-45ef-ba92-4bc96838c0ab")
                        },
                        new
                        {
                            MessageId = new Guid("78583d2a-fc58-4670-a0f8-9c2e5e860b5f"),
                            ReportId = new Guid("c2452f1f-4fde-4c6c-8234-ef077aada3f5")
                        },
                        new
                        {
                            MessageId = new Guid("212f8194-0019-4a32-acf7-aea61f497571"),
                            ReportId = new Guid("00b24115-2f00-46f0-ada2-deb01be556c8")
                        });
                });

            modelBuilder.Entity("OkOk.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Handled")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11a7f39b-fb24-475c-8e1e-c1639e98abac"),
                            Handled = false
                        },
                        new
                        {
                            Id = new Guid("0b158b7a-2b6a-45ef-ba92-4bc96838c0ab"),
                            Handled = false
                        },
                        new
                        {
                            Id = new Guid("c2452f1f-4fde-4c6c-8234-ef077aada3f5"),
                            Handled = false
                        },
                        new
                        {
                            Id = new Guid("00b24115-2f00-46f0-ada2-deb01be556c8"),
                            Handled = false
                        });
                });

            modelBuilder.Entity("OkOk.Models.SignUpRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Handled")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("DoctorId");

                    b.ToTable("SignUpRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c990b1e-783b-454f-b957-ad49464b40be"),
                            ClientId = "720407f4-7258-4ea7-9b48-248236068846",
                            DoctorId = "2b7ef106-96bc-4faa-ab48-5ab29e9a9447",
                            Handled = false
                        },
                        new
                        {
                            Id = new Guid("6584592f-e0e3-470f-8283-a6b30764c070"),
                            ClientId = "2dd3a743-1183-4ce5-b5b8-b63398f7cd20",
                            DoctorId = "2b7ef106-96bc-4faa-ab48-5ab29e9a9447",
                            Handled = false
                        });
                });

            modelBuilder.Entity("OkOk.Models.SupportGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SupportGroups");
                });

            modelBuilder.Entity("OkOk.Models.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Treatments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("303ca8fc-b0af-462e-ae3b-bbb0ee931486"),
                            ClientId = "720407f4-7258-4ea7-9b48-248236068846",
                            DateTime = new DateTime(2022, 1, 20, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "2b7ef106-96bc-4faa-ab48-5ab29e9a9447"
                        },
                        new
                        {
                            Id = new Guid("e248e973-aa75-4e5c-ac9e-ffbd34630220"),
                            ClientId = "720407f4-7258-4ea7-9b48-248236068846",
                            DateTime = new DateTime(2022, 1, 20, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "2b7ef106-96bc-4faa-ab48-5ab29e9a9447"
                        },
                        new
                        {
                            Id = new Guid("5d258558-fbbc-46cd-815d-c4c371c92463"),
                            ClientId = "720407f4-7258-4ea7-9b48-248236068846",
                            DateTime = new DateTime(2022, 1, 20, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "2b7ef106-96bc-4faa-ab48-5ab29e9a9447"
                        },
                        new
                        {
                            Id = new Guid("ea917d24-b4a7-48d1-9b59-ba650f70d131"),
                            ClientId = "720407f4-7258-4ea7-9b48-248236068846",
                            DateTime = new DateTime(2022, 1, 11, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "2b7ef106-96bc-4faa-ab48-5ab29e9a9447"
                        },
                        new
                        {
                            Id = new Guid("cbaa749b-d856-4048-9bbc-ec00bb2ec525"),
                            ClientId = "720407f4-7258-4ea7-9b48-248236068846",
                            DateTime = new DateTime(2022, 1, 11, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "2b7ef106-96bc-4faa-ab48-5ab29e9a9447"
                        },
                        new
                        {
                            Id = new Guid("1aa7035d-5abe-4b9a-a876-aa8a7b120f77"),
                            ClientId = "720407f4-7258-4ea7-9b48-248236068846",
                            DateTime = new DateTime(2022, 1, 11, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "2b7ef106-96bc-4faa-ab48-5ab29e9a9447"
                        },
                        new
                        {
                            Id = new Guid("e599e441-8f00-47fc-8a8f-c8bf3efc4ee3"),
                            ClientId = "720407f4-7258-4ea7-9b48-248236068846",
                            DateTime = new DateTime(2022, 2, 28, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "2b7ef106-96bc-4faa-ab48-5ab29e9a9447"
                        },
                        new
                        {
                            Id = new Guid("7175bbd6-e382-459d-96fd-a20b49dd7a12"),
                            ClientId = "720407f4-7258-4ea7-9b48-248236068846",
                            DateTime = new DateTime(2022, 2, 28, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "2b7ef106-96bc-4faa-ab48-5ab29e9a9447"
                        },
                        new
                        {
                            Id = new Guid("09496113-9235-44e3-8a42-7869a9e418e5"),
                            ClientId = "720407f4-7258-4ea7-9b48-248236068846",
                            DateTime = new DateTime(2022, 2, 28, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "2b7ef106-96bc-4faa-ab48-5ab29e9a9447"
                        },
                        new
                        {
                            Id = new Guid("15dad6c5-078f-4baf-98a6-d72383e2fd22"),
                            ClientId = "2dd3a743-1183-4ce5-b5b8-b63398f7cd20",
                            DateTime = new DateTime(2022, 1, 20, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "c427ade3-3d27-4023-8fd5-46fbab6e7a6f"
                        },
                        new
                        {
                            Id = new Guid("3675e088-e70d-42c5-aee9-208f6b7d3855"),
                            ClientId = "2dd3a743-1183-4ce5-b5b8-b63398f7cd20",
                            DateTime = new DateTime(2022, 1, 20, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "c427ade3-3d27-4023-8fd5-46fbab6e7a6f"
                        },
                        new
                        {
                            Id = new Guid("7b7f5624-e10e-455b-9391-4031e02d83f9"),
                            ClientId = "2dd3a743-1183-4ce5-b5b8-b63398f7cd20",
                            DateTime = new DateTime(2022, 1, 20, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "c427ade3-3d27-4023-8fd5-46fbab6e7a6f"
                        },
                        new
                        {
                            Id = new Guid("3db7e857-9f68-4eca-90b2-929e39ebc548"),
                            ClientId = "2dd3a743-1183-4ce5-b5b8-b63398f7cd20",
                            DateTime = new DateTime(2022, 1, 11, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "c427ade3-3d27-4023-8fd5-46fbab6e7a6f"
                        },
                        new
                        {
                            Id = new Guid("89b85bd0-8991-447c-a0c0-54dc9b05527b"),
                            ClientId = "2dd3a743-1183-4ce5-b5b8-b63398f7cd20",
                            DateTime = new DateTime(2022, 1, 11, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "c427ade3-3d27-4023-8fd5-46fbab6e7a6f"
                        },
                        new
                        {
                            Id = new Guid("e6bab421-592d-410d-b5d9-11a1752e2337"),
                            ClientId = "2dd3a743-1183-4ce5-b5b8-b63398f7cd20",
                            DateTime = new DateTime(2022, 1, 11, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "c427ade3-3d27-4023-8fd5-46fbab6e7a6f"
                        },
                        new
                        {
                            Id = new Guid("0e288c5e-7986-4b48-9135-135c3ad2db83"),
                            ClientId = "2dd3a743-1183-4ce5-b5b8-b63398f7cd20",
                            DateTime = new DateTime(2022, 2, 28, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Intake",
                            DoctorId = "c427ade3-3d27-4023-8fd5-46fbab6e7a6f"
                        },
                        new
                        {
                            Id = new Guid("90f352d5-4943-4462-bc08-64716a49ebf3"),
                            ClientId = "2dd3a743-1183-4ce5-b5b8-b63398f7cd20",
                            DateTime = new DateTime(2022, 2, 28, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "c427ade3-3d27-4023-8fd5-46fbab6e7a6f"
                        },
                        new
                        {
                            Id = new Guid("8d26def2-9522-44b5-ac00-3255a3d83aa6"),
                            ClientId = "2dd3a743-1183-4ce5-b5b8-b63398f7cd20",
                            DateTime = new DateTime(2022, 2, 28, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Behandeling",
                            DoctorId = "c427ade3-3d27-4023-8fd5-46fbab6e7a6f"
                        });
                });

            modelBuilder.Entity("OkOk.Models.Identity.ChatApplicationUser", b =>
                {
                    b.HasBaseType("OkOk.Models.Identity.ApplicationUser");

                    b.HasDiscriminator().HasValue("ChatApplicationUser");
                });

            modelBuilder.Entity("OkOk.Models.Identity.GuardianApplicationUser", b =>
                {
                    b.HasBaseType("OkOk.Models.Identity.ApplicationUser");

                    b.HasDiscriminator().HasValue("GuardianApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "58380249-7ae0-4acb-8a6f-ea8538cf71d4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d73e26e-13b1-4391-bb02-becd852528e4",
                            Email = "guardianone@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Guardian",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUARDIANONE@OKOKAPP.NL",
                            NormalizedUserName = "GUARDIANONE@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEMD6GwhItXzVRl2/KLPqTa3KSP4DrEDL0ljXCxRR0qgnq0fpxtaStzWLD9eD35Pchg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a7fe3c40-1cec-4097-add9-ed97773d4cbf",
                            TwoFactorEnabled = false,
                            UserName = "guardianone@okokapp.nl"
                        },
                        new
                        {
                            Id = "840ef66d-11a4-47a8-af7e-9ad16ab34d67",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "861dbd65-e997-4408-aba3-4f02c71be89f",
                            Email = "guardiantwo@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Guardian",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUARDIANTWO@OKOKAPP.NL",
                            NormalizedUserName = "GUARDIANTWO@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEOxdyogu7IEz6aNa7rwtOqx3UkvIB/8e8eboXV9UhiX2OkrCpVIdv6vVQzkywhk59Q==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3bb5a64f-3d43-4f4c-bc65-dcbc2ec774ed",
                            TwoFactorEnabled = false,
                            UserName = "guardiantwo@okokapp.nl"
                        });
                });

            modelBuilder.Entity("OkOk.Models.Identity.ClientApplicationUser", b =>
                {
                    b.HasBaseType("OkOk.Models.Identity.ChatApplicationUser");

                    b.Property<Guid?>("AddressId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("OldEnough")
                        .HasColumnType("INTEGER");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("ClientApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "720407f4-7258-4ea7-9b48-248236068846",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa9ca50b-859a-4af2-ac15-bcfbe2eb7206",
                            Email = "clientone@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENTONE@OKOKAPP.NL",
                            NormalizedUserName = "CLIENTONE@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEBvFLEpuns6yWwnO1hImF2wL6NcydVm4iIsq762M0JhUKaKa8gtTLhopA/PFk2BuGg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1bfa4280-47fb-4f6c-aa74-d52811c11a88",
                            TwoFactorEnabled = false,
                            UserName = "clientone@okokapp.nl",
                            AddressId = new Guid("029214ef-1367-4d6c-aab1-7f7d7f0ed813"),
                            OldEnough = false
                        },
                        new
                        {
                            Id = "2dd3a743-1183-4ce5-b5b8-b63398f7cd20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ccb3467-afea-49da-8bfb-37500340e046",
                            Email = "clienttwo@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Client",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENTTWO@OKOKAPP.NL",
                            NormalizedUserName = "CLIENTTWO@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEPgACdJi6hpzCZi/ElCBAUflbbmmYfp5zT4iniebHQ2D5YQfXfYj10dxHKPylYy0UA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0afb5393-5021-488e-9668-086e0e88a17e",
                            TwoFactorEnabled = false,
                            UserName = "clienttwo@okokapp.nl",
                            AddressId = new Guid("ade6035d-2456-4a17-a031-e6a3c1e633c9"),
                            OldEnough = false
                        });
                });

            modelBuilder.Entity("OkOk.Models.Identity.DoctorApplicationUser", b =>
                {
                    b.HasBaseType("OkOk.Models.Identity.ChatApplicationUser");

                    b.Property<string>("Specialism")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("DoctorApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "2b7ef106-96bc-4faa-ab48-5ab29e9a9447",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df3d6bf6-1857-44e1-94e0-d27d50424167",
                            Email = "doctorone@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Doctor",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTORONE@OKOKAPP.NL",
                            NormalizedUserName = "DOCTORONE@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEOXqXJ71fE4FC2kuqRk5gFaj8bXiPhmUlk5sA7hnIgiqZ+uqqS5sUiD3peb3RSfZWg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0f6c1d49-e0c8-4e48-8e08-5bfdd563dc72",
                            TwoFactorEnabled = false,
                            UserName = "doctorone@okokapp.nl",
                            Specialism = "Autisme"
                        },
                        new
                        {
                            Id = "c427ade3-3d27-4023-8fd5-46fbab6e7a6f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "67c20998-b855-47c2-94ec-a642da562ba2",
                            Email = "doctortwo@okokapp.nl",
                            EmailConfirmed = true,
                            FirstName = "Doctor",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTORTWO@OKOKAPP.NL",
                            NormalizedUserName = "DOCTORTWO@OKOKAPP.NL",
                            PasswordHash = "AQAAAAEAACcQAAAAEKf6iEP52W+IuV3gQSr3rJFTHeTWQe0incf+uMh2P5PaaPiso0Lwhn4Crpx3I7sRAw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "80ac755c-bea2-495d-8d1c-0f823c1e2227",
                            TwoFactorEnabled = false,
                            UserName = "doctortwo@okokapp.nl",
                            Specialism = "Autisme"
                        });
                });

            modelBuilder.Entity("ChatApplicationUserSupportGroup", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ChatApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ChatUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OkOk.Models.SupportGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuardianChild", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ClientApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Identity.GuardianApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageChatapplicationUser", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ChatApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ChatUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OkOk.Models.Message", b =>
                {
                    b.HasOne("OkOk.Models.SupportGroup", "SupportGroup")
                        .WithMany("Received")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OkOk.Models.Identity.ChatApplicationUser", "Sender")
                        .WithMany("Sent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("SupportGroup");
                });

            modelBuilder.Entity("OkOk.Models.MessageReport", b =>
                {
                    b.HasOne("OkOk.Models.Message", "Message")
                        .WithMany("MessageReports")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Report", "Report")
                        .WithOne("MessageReport")
                        .HasForeignKey("OkOk.Models.MessageReport", "ReportId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("OkOk.Models.SignUpRequest", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ClientApplicationUser", "ClientApplicationUser")
                        .WithOne("SignUpRequest")
                        .HasForeignKey("OkOk.Models.SignUpRequest", "ClientId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Identity.DoctorApplicationUser", "DoctorApplicationUser")
                        .WithMany("SignUpRequests")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("ClientApplicationUser");

                    b.Navigation("DoctorApplicationUser");
                });

            modelBuilder.Entity("OkOk.Models.Treatment", b =>
                {
                    b.HasOne("OkOk.Models.Identity.ClientApplicationUser", "ClientApplicationUser")
                        .WithMany("Treatments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("OkOk.Models.Identity.DoctorApplicationUser", "DoctorApplicationUser")
                        .WithMany("Treatments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("ClientApplicationUser");

                    b.Navigation("DoctorApplicationUser");
                });

            modelBuilder.Entity("OkOk.Models.Identity.ClientApplicationUser", b =>
                {
                    b.HasOne("OkOk.Models.Address", "Address")
                        .WithOne("ClientApplicationUser")
                        .HasForeignKey("OkOk.Models.Identity.ClientApplicationUser", "AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("OkOk.Models.Address", b =>
                {
                    b.Navigation("ClientApplicationUser");
                });

            modelBuilder.Entity("OkOk.Models.Message", b =>
                {
                    b.Navigation("MessageReports");
                });

            modelBuilder.Entity("OkOk.Models.Report", b =>
                {
                    b.Navigation("MessageReport");
                });

            modelBuilder.Entity("OkOk.Models.SupportGroup", b =>
                {
                    b.Navigation("Received");
                });

            modelBuilder.Entity("OkOk.Models.Identity.ChatApplicationUser", b =>
                {
                    b.Navigation("Sent");
                });

            modelBuilder.Entity("OkOk.Models.Identity.ClientApplicationUser", b =>
                {
                    b.Navigation("SignUpRequest");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("OkOk.Models.Identity.DoctorApplicationUser", b =>
                {
                    b.Navigation("SignUpRequests");

                    b.Navigation("Treatments");
                });
#pragma warning restore 612, 618
        }
    }
}
